{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "a = np.array([[1, 2, 3],\n",
    "             [5, 6, 7],\n",
    "             [9, 10, 11],\n",
    "             [4, 8, 12]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "b = np.array([[1], [5], [9]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "c = np.array([1, 2, 3, 4, 5, 6])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1,  2,  3],\n",
       "       [ 5,  6,  7],\n",
       "       [ 9, 10, 11],\n",
       "       [ 4,  8, 12]])"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "a = np.matrix(\"1 2 3; 5 6 7; 9 10 11; 4 8 12\")\n",
    "b = np.matrix(\"1; 5; 9\")\n",
    "c = np.matrix(\"1 2 3 4 5 6\")\n",
    "d = np.matrix(\"3; 4; 1\")\n",
    "f1 = np.matrix(\"-6 2 5; -4 1 -5; -3 -2 8\")\n",
    "f2 = np.matrix(\"5 2 -5; -8 -10 4; 9 -7 1\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "e1 = a*(b+d)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "e2 = a*b + a*d "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "matrix([[ 52],\n",
       "        [144],\n",
       "        [236],\n",
       "        [208]])"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "e1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "matrix([[ 52],\n",
       "        [144],\n",
       "        [236],\n",
       "        [208]])"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "e2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ -1 -67  43]\n",
      " [-73  17  19]\n",
      " [ 73 -42  15]]\n"
     ]
    }
   ],
   "source": [
    "print(f1*f2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[-23  22 -25]\n",
      " [ 76 -34  42]\n",
      " [-29   9  88]]\n"
     ]
    }
   ],
   "source": [
    "print(f2*f1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "an = np.eye(3, M=4, k=0)\n",
    "am = np.eye(3, M=4, k=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1.,  0.,  0.,  0.],\n",
       "       [ 0.,  1.,  0.,  0.],\n",
       "       [ 0.,  0.,  1.,  0.]])"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "an"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.,  1.,  0.,  0.],\n",
       "       [ 0.,  0.,  1.,  0.],\n",
       "       [ 0.,  0.,  0.,  1.]])"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "am"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "mat = am+2*an"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 2.],\n",
       "       [ 1.],\n",
       "       [ 0.],\n",
       "       [ 0.],\n",
       "       [ 0.],\n",
       "       [ 2.],\n",
       "       [ 1.],\n",
       "       [ 0.],\n",
       "       [ 0.],\n",
       "       [ 0.],\n",
       "       [ 2.],\n",
       "       [ 1.]])"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mat.reshape((12,1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mat.shape[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "y = [0, 0, 0, 1, 1, 2]\n",
    "y_1 = [-0.5, 0.5, 1.5, 0, 2.5, 3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "sum_1 = 0\n",
    "sum_2 = 0\n",
    "for i in range(len(y)):\n",
    "    sum_1 += (y[i]-y_1[i])**2\n",
    "    sum_2 += (abs(y[i]-y_1[i]))\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7.0"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum_1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6.0"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum_2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "y = np.array([[10], [7], [12]])\n",
    "x = np.array([[1, 60], [1, 50], [1, 75]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "k = np.linalg.inv(x.T.dot(x))\n",
    "z = x.T.dot(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "b = k.dot(z)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-2.342 0.195\n"
     ]
    }
   ],
   "source": [
    "print(round(b[0][0], 3), round(b[1][0], 3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import urllib\n",
    "from urllib import request\n",
    "import numpy as np\n",
    "\n",
    "fname = 'https://stepic.org/media/attachments/lesson/16462/boston_houses.csv'  # read file name from stdin\n",
    "f = urllib.request.urlopen(fname)  # open file from URL\n",
    "data = np.loadtxt(f, delimiter=',', skiprows=1)  # load data to work with"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "506"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "y = data[:,0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "y = y.reshape(data.shape[0], 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "x = data[:,1:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 24. ],\n",
       "       [ 21.6],\n",
       "       [ 34.7],\n",
       "       [ 33.4],\n",
       "       [ 36.2],\n",
       "       [ 28.7],\n",
       "       [ 22.9],\n",
       "       [ 27.1],\n",
       "       [ 16.5],\n",
       "       [ 18.9],\n",
       "       [ 15. ],\n",
       "       [ 18.9],\n",
       "       [ 21.7],\n",
       "       [ 20.4],\n",
       "       [ 18.2],\n",
       "       [ 19.9],\n",
       "       [ 23.1],\n",
       "       [ 17.5],\n",
       "       [ 20.2],\n",
       "       [ 18.2],\n",
       "       [ 13.6],\n",
       "       [ 19.6],\n",
       "       [ 15.2],\n",
       "       [ 14.5],\n",
       "       [ 15.6],\n",
       "       [ 13.9],\n",
       "       [ 16.6],\n",
       "       [ 14.8],\n",
       "       [ 18.4],\n",
       "       [ 21. ],\n",
       "       [ 12.7],\n",
       "       [ 14.5],\n",
       "       [ 13.2],\n",
       "       [ 13.1],\n",
       "       [ 13.5],\n",
       "       [ 18.9],\n",
       "       [ 20. ],\n",
       "       [ 21. ],\n",
       "       [ 24.7],\n",
       "       [ 30.8],\n",
       "       [ 34.9],\n",
       "       [ 26.6],\n",
       "       [ 25.3],\n",
       "       [ 24.7],\n",
       "       [ 21.2],\n",
       "       [ 19.3],\n",
       "       [ 20. ],\n",
       "       [ 16.6],\n",
       "       [ 14.4],\n",
       "       [ 19.4],\n",
       "       [ 19.7],\n",
       "       [ 20.5],\n",
       "       [ 25. ],\n",
       "       [ 23.4],\n",
       "       [ 18.9],\n",
       "       [ 35.4],\n",
       "       [ 24.7],\n",
       "       [ 31.6],\n",
       "       [ 23.3],\n",
       "       [ 19.6],\n",
       "       [ 18.7],\n",
       "       [ 16. ],\n",
       "       [ 22.2],\n",
       "       [ 25. ],\n",
       "       [ 33. ],\n",
       "       [ 23.5],\n",
       "       [ 19.4],\n",
       "       [ 22. ],\n",
       "       [ 17.4],\n",
       "       [ 20.9],\n",
       "       [ 24.2],\n",
       "       [ 21.7],\n",
       "       [ 22.8],\n",
       "       [ 23.4],\n",
       "       [ 24.1],\n",
       "       [ 21.4],\n",
       "       [ 20. ],\n",
       "       [ 20.8],\n",
       "       [ 21.2],\n",
       "       [ 20.3],\n",
       "       [ 28. ],\n",
       "       [ 23.9],\n",
       "       [ 24.8],\n",
       "       [ 22.9],\n",
       "       [ 23.9],\n",
       "       [ 26.6],\n",
       "       [ 22.5],\n",
       "       [ 22.2],\n",
       "       [ 23.6],\n",
       "       [ 28.7],\n",
       "       [ 22.6],\n",
       "       [ 22. ],\n",
       "       [ 22.9],\n",
       "       [ 25. ],\n",
       "       [ 20.6],\n",
       "       [ 28.4],\n",
       "       [ 21.4],\n",
       "       [ 38.7],\n",
       "       [ 43.8],\n",
       "       [ 33.2],\n",
       "       [ 27.5],\n",
       "       [ 26.5],\n",
       "       [ 18.6],\n",
       "       [ 19.3],\n",
       "       [ 20.1],\n",
       "       [ 19.5],\n",
       "       [ 19.5],\n",
       "       [ 20.4],\n",
       "       [ 19.8],\n",
       "       [ 19.4],\n",
       "       [ 21.7],\n",
       "       [ 22.8],\n",
       "       [ 18.8],\n",
       "       [ 18.7],\n",
       "       [ 18.5],\n",
       "       [ 18.3],\n",
       "       [ 21.2],\n",
       "       [ 19.2],\n",
       "       [ 20.4],\n",
       "       [ 19.3],\n",
       "       [ 22. ],\n",
       "       [ 20.3],\n",
       "       [ 20.5],\n",
       "       [ 17.3],\n",
       "       [ 18.8],\n",
       "       [ 21.4],\n",
       "       [ 15.7],\n",
       "       [ 16.2],\n",
       "       [ 18. ],\n",
       "       [ 14.3],\n",
       "       [ 19.2],\n",
       "       [ 19.6],\n",
       "       [ 23. ],\n",
       "       [ 18.4],\n",
       "       [ 15.6],\n",
       "       [ 18.1],\n",
       "       [ 17.4],\n",
       "       [ 17.1],\n",
       "       [ 13.3],\n",
       "       [ 17.8],\n",
       "       [ 14. ],\n",
       "       [ 14.4],\n",
       "       [ 13.4],\n",
       "       [ 15.6],\n",
       "       [ 11.8],\n",
       "       [ 13.8],\n",
       "       [ 15.6],\n",
       "       [ 14.6],\n",
       "       [ 17.8],\n",
       "       [ 15.4],\n",
       "       [ 21.5],\n",
       "       [ 19.6],\n",
       "       [ 15.3],\n",
       "       [ 19.4],\n",
       "       [ 17. ],\n",
       "       [ 15.6],\n",
       "       [ 13.1],\n",
       "       [ 41.3],\n",
       "       [ 24.3],\n",
       "       [ 23.3],\n",
       "       [ 27. ],\n",
       "       [ 50. ],\n",
       "       [ 50. ],\n",
       "       [ 50. ],\n",
       "       [ 22.7],\n",
       "       [ 25. ],\n",
       "       [ 50. ],\n",
       "       [ 23.8],\n",
       "       [ 23.8],\n",
       "       [ 22.3],\n",
       "       [ 17.4],\n",
       "       [ 19.1],\n",
       "       [ 23.1],\n",
       "       [ 23.6],\n",
       "       [ 22.6],\n",
       "       [ 29.4],\n",
       "       [ 23.2],\n",
       "       [ 24.6],\n",
       "       [ 29.9],\n",
       "       [ 37.2],\n",
       "       [ 39.8],\n",
       "       [ 36.2],\n",
       "       [ 37.9],\n",
       "       [ 32.5],\n",
       "       [ 26.4],\n",
       "       [ 29.6],\n",
       "       [ 50. ],\n",
       "       [ 32. ],\n",
       "       [ 29.8],\n",
       "       [ 34.9],\n",
       "       [ 37. ],\n",
       "       [ 30.5],\n",
       "       [ 36.4],\n",
       "       [ 31.1],\n",
       "       [ 29.1],\n",
       "       [ 50. ],\n",
       "       [ 33.3],\n",
       "       [ 30.3],\n",
       "       [ 34.6],\n",
       "       [ 34.9],\n",
       "       [ 32.9],\n",
       "       [ 24.1],\n",
       "       [ 42.3],\n",
       "       [ 48.5],\n",
       "       [ 50. ],\n",
       "       [ 22.6],\n",
       "       [ 24.4],\n",
       "       [ 22.5],\n",
       "       [ 24.4],\n",
       "       [ 20. ],\n",
       "       [ 21.7],\n",
       "       [ 19.3],\n",
       "       [ 22.4],\n",
       "       [ 28.1],\n",
       "       [ 23.7],\n",
       "       [ 25. ],\n",
       "       [ 23.3],\n",
       "       [ 28.7],\n",
       "       [ 21.5],\n",
       "       [ 23. ],\n",
       "       [ 26.7],\n",
       "       [ 21.7],\n",
       "       [ 27.5],\n",
       "       [ 30.1],\n",
       "       [ 44.8],\n",
       "       [ 50. ],\n",
       "       [ 37.6],\n",
       "       [ 31.6],\n",
       "       [ 46.7],\n",
       "       [ 31.5],\n",
       "       [ 24.3],\n",
       "       [ 31.7],\n",
       "       [ 41.7],\n",
       "       [ 48.3],\n",
       "       [ 29. ],\n",
       "       [ 24. ],\n",
       "       [ 25.1],\n",
       "       [ 31.5],\n",
       "       [ 23.7],\n",
       "       [ 23.3],\n",
       "       [ 22. ],\n",
       "       [ 20.1],\n",
       "       [ 22.2],\n",
       "       [ 23.7],\n",
       "       [ 17.6],\n",
       "       [ 18.5],\n",
       "       [ 24.3],\n",
       "       [ 20.5],\n",
       "       [ 24.5],\n",
       "       [ 26.2],\n",
       "       [ 24.4],\n",
       "       [ 24.8],\n",
       "       [ 29.6],\n",
       "       [ 42.8],\n",
       "       [ 21.9],\n",
       "       [ 20.9],\n",
       "       [ 44. ],\n",
       "       [ 50. ],\n",
       "       [ 36. ],\n",
       "       [ 30.1],\n",
       "       [ 33.8],\n",
       "       [ 43.1],\n",
       "       [ 48.8],\n",
       "       [ 31. ],\n",
       "       [ 36.5],\n",
       "       [ 22.8],\n",
       "       [ 30.7],\n",
       "       [ 50. ],\n",
       "       [ 43.5],\n",
       "       [ 20.7],\n",
       "       [ 21.1],\n",
       "       [ 25.2],\n",
       "       [ 24.4],\n",
       "       [ 35.2],\n",
       "       [ 32.4],\n",
       "       [ 32. ],\n",
       "       [ 33.2],\n",
       "       [ 33.1],\n",
       "       [ 29.1],\n",
       "       [ 35.1],\n",
       "       [ 45.4],\n",
       "       [ 35.4],\n",
       "       [ 46. ],\n",
       "       [ 50. ],\n",
       "       [ 32.2],\n",
       "       [ 22. ],\n",
       "       [ 20.1],\n",
       "       [ 23.2],\n",
       "       [ 22.3],\n",
       "       [ 24.8],\n",
       "       [ 28.5],\n",
       "       [ 37.3],\n",
       "       [ 27.9],\n",
       "       [ 23.9],\n",
       "       [ 21.7],\n",
       "       [ 28.6],\n",
       "       [ 27.1],\n",
       "       [ 20.3],\n",
       "       [ 22.5],\n",
       "       [ 29. ],\n",
       "       [ 24.8],\n",
       "       [ 22. ],\n",
       "       [ 26.4],\n",
       "       [ 33.1],\n",
       "       [ 36.1],\n",
       "       [ 28.4],\n",
       "       [ 33.4],\n",
       "       [ 28.2],\n",
       "       [ 22.8],\n",
       "       [ 20.3],\n",
       "       [ 16.1],\n",
       "       [ 22.1],\n",
       "       [ 19.4],\n",
       "       [ 21.6],\n",
       "       [ 23.8],\n",
       "       [ 16.2],\n",
       "       [ 17.8],\n",
       "       [ 19.8],\n",
       "       [ 23.1],\n",
       "       [ 21. ],\n",
       "       [ 23.8],\n",
       "       [ 23.1],\n",
       "       [ 20.4],\n",
       "       [ 18.5],\n",
       "       [ 25. ],\n",
       "       [ 24.6],\n",
       "       [ 23. ],\n",
       "       [ 22.2],\n",
       "       [ 19.3],\n",
       "       [ 22.6],\n",
       "       [ 19.8],\n",
       "       [ 17.1],\n",
       "       [ 19.4],\n",
       "       [ 22.2],\n",
       "       [ 20.7],\n",
       "       [ 21.1],\n",
       "       [ 19.5],\n",
       "       [ 18.5],\n",
       "       [ 20.6],\n",
       "       [ 19. ],\n",
       "       [ 18.7],\n",
       "       [ 32.7],\n",
       "       [ 16.5],\n",
       "       [ 23.9],\n",
       "       [ 31.2],\n",
       "       [ 17.5],\n",
       "       [ 17.2],\n",
       "       [ 23.1],\n",
       "       [ 24.5],\n",
       "       [ 26.6],\n",
       "       [ 22.9],\n",
       "       [ 24.1],\n",
       "       [ 18.6],\n",
       "       [ 30.1],\n",
       "       [ 18.2],\n",
       "       [ 20.6],\n",
       "       [ 17.8],\n",
       "       [ 21.7],\n",
       "       [ 22.7],\n",
       "       [ 22.6],\n",
       "       [ 25. ],\n",
       "       [ 19.9],\n",
       "       [ 20.8],\n",
       "       [ 16.8],\n",
       "       [ 21.9],\n",
       "       [ 27.5],\n",
       "       [ 21.9],\n",
       "       [ 23.1],\n",
       "       [ 50. ],\n",
       "       [ 50. ],\n",
       "       [ 50. ],\n",
       "       [ 50. ],\n",
       "       [ 50. ],\n",
       "       [ 13.8],\n",
       "       [ 13.8],\n",
       "       [ 15. ],\n",
       "       [ 13.9],\n",
       "       [ 13.3],\n",
       "       [ 13.1],\n",
       "       [ 10.2],\n",
       "       [ 10.4],\n",
       "       [ 10.9],\n",
       "       [ 11.3],\n",
       "       [ 12.3],\n",
       "       [  8.8],\n",
       "       [  7.2],\n",
       "       [ 10.5],\n",
       "       [  7.4],\n",
       "       [ 10.2],\n",
       "       [ 11.5],\n",
       "       [ 15.1],\n",
       "       [ 23.2],\n",
       "       [  9.7],\n",
       "       [ 13.8],\n",
       "       [ 12.7],\n",
       "       [ 13.1],\n",
       "       [ 12.5],\n",
       "       [  8.5],\n",
       "       [  5. ],\n",
       "       [  6.3],\n",
       "       [  5.6],\n",
       "       [  7.2],\n",
       "       [ 12.1],\n",
       "       [  8.3],\n",
       "       [  8.5],\n",
       "       [  5. ],\n",
       "       [ 11.9],\n",
       "       [ 27.9],\n",
       "       [ 17.2],\n",
       "       [ 27.5],\n",
       "       [ 15. ],\n",
       "       [ 17.2],\n",
       "       [ 17.9],\n",
       "       [ 16.3],\n",
       "       [  7. ],\n",
       "       [  7.2],\n",
       "       [  7.5],\n",
       "       [ 10.4],\n",
       "       [  8.8],\n",
       "       [  8.4],\n",
       "       [ 16.7],\n",
       "       [ 14.2],\n",
       "       [ 20.8],\n",
       "       [ 13.4],\n",
       "       [ 11.7],\n",
       "       [  8.3],\n",
       "       [ 10.2],\n",
       "       [ 10.9],\n",
       "       [ 11. ],\n",
       "       [  9.5],\n",
       "       [ 14.5],\n",
       "       [ 14.1],\n",
       "       [ 16.1],\n",
       "       [ 14.3],\n",
       "       [ 11.7],\n",
       "       [ 13.4],\n",
       "       [  9.6],\n",
       "       [  8.7],\n",
       "       [  8.4],\n",
       "       [ 12.8],\n",
       "       [ 10.5],\n",
       "       [ 17.1],\n",
       "       [ 18.4],\n",
       "       [ 15.4],\n",
       "       [ 10.8],\n",
       "       [ 11.8],\n",
       "       [ 14.9],\n",
       "       [ 12.6],\n",
       "       [ 14.1],\n",
       "       [ 13. ],\n",
       "       [ 13.4],\n",
       "       [ 15.2],\n",
       "       [ 16.1],\n",
       "       [ 17.8],\n",
       "       [ 14.9],\n",
       "       [ 14.1],\n",
       "       [ 12.7],\n",
       "       [ 13.5],\n",
       "       [ 14.9],\n",
       "       [ 20. ],\n",
       "       [ 16.4],\n",
       "       [ 17.7],\n",
       "       [ 19.5],\n",
       "       [ 20.2],\n",
       "       [ 21.4],\n",
       "       [ 19.9],\n",
       "       [ 19. ],\n",
       "       [ 19.1],\n",
       "       [ 19.1],\n",
       "       [ 20.1],\n",
       "       [ 19.9],\n",
       "       [ 19.6],\n",
       "       [ 23.2],\n",
       "       [ 29.8],\n",
       "       [ 13.8],\n",
       "       [ 13.3],\n",
       "       [ 16.7],\n",
       "       [ 12. ],\n",
       "       [ 14.6],\n",
       "       [ 21.4],\n",
       "       [ 23. ],\n",
       "       [ 23.7],\n",
       "       [ 25. ],\n",
       "       [ 21.8],\n",
       "       [ 20.6],\n",
       "       [ 21.2],\n",
       "       [ 19.1],\n",
       "       [ 20.6],\n",
       "       [ 15.2],\n",
       "       [  7. ],\n",
       "       [  8.1],\n",
       "       [ 13.6],\n",
       "       [ 20.1],\n",
       "       [ 21.8],\n",
       "       [ 24.5],\n",
       "       [ 23.1],\n",
       "       [ 19.7],\n",
       "       [ 18.3],\n",
       "       [ 21.2],\n",
       "       [ 17.5],\n",
       "       [ 16.8],\n",
       "       [ 22.4],\n",
       "       [ 20.6],\n",
       "       [ 23.9],\n",
       "       [ 22. ],\n",
       "       [ 11.9]])"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "ones = np.ones_like(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = np.hstack((ones, x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [],
   "source": [
    "k = np.linalg.inv(x.T.dot(x))\n",
    "z = x.T.dot(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [],
   "source": [
    "b = k.dot(z)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ -3.65580429],\n",
       "       [ -0.2163955 ],\n",
       "       [  0.0737306 ],\n",
       "       [  4.41245058],\n",
       "       [-25.46844878],\n",
       "       [  7.14320155],\n",
       "       [ -1.30108768]])"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [],
   "source": [
    "b = b.reshape((len(b),))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-3.65580428507 -0.216395502369 0.0737305981755 4.41245057691 -25.4684487841 7.14320155075 -1.30108767765\n"
     ]
    }
   ],
   "source": [
    "print(' '.join(list(map(str, list(b)))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
