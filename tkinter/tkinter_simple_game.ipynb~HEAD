{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Once deleted, variables cannot be recovered. Proceed (y/[n])? y\n"
     ]
    }
   ],
   "source": [
    "reset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import tkinter as tk\n",
    "import random as rd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Constants\n",
    "HEIGHT = 480\n",
    "WIDTH = 640\n",
    "BG_COLOR = \"white\"\n",
    "BED_COLOR = \"red\"\n",
    "COLORS = [\"aqua\",\"fuchsia\",BED_COLOR ,\"pink\", \"yellow\", BED_COLOR, \"gold\", \"chartreuse\", BED_COLOR]\n",
    "ZERO = 0\n",
    "MAIN_BALL_RADIUS = 30\n",
    "MAIN_BALL_COLOR = \"blue\"\n",
    "INIT_DX = 1\n",
    "INIT_DY = 1\n",
    "DELEY = 5\n",
    "NUN_BALLS = 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "class Balls(object):\n",
    "    def __init__(self, x, y, r, color, dx=0, dy=0):\n",
    "        self.x = x\n",
    "        self.y = y\n",
    "        self.r = r\n",
    "        self.color = color\n",
    "        self.dx = dx\n",
    "        self.dy = dy\n",
    "    \n",
    "    def draw(self):\n",
    "        canvas.create_oval(self.x - self.r, self.y - self.r, self.x + self.r, self.y + self.r,\n",
    "                           fill=self.color, outline=self.color if self.color != BED_COLOR else \"black\")\n",
    "        \n",
    "    def hide(self):\n",
    "        canvas.create_oval(self.x - self.r, self.y - self.r, self.x + self.r, self.y + self.r, fill=BG_COLOR,\n",
    "                          outline=BG_COLOR)\n",
    "    def is_collision(self, ball):\n",
    "        a = abs(self.x + self.dx - ball.x)\n",
    "        b = abs(self.y + self.dy - ball.y)\n",
    "        \n",
    "        return (a*a + b*b)**0.5 <= self.r + ball.r\n",
    "        \n",
    "    def move(self):\n",
    "        #colliding with walls\n",
    "        if (self.x + self.r + self.dx >= WIDTH) or (self.x - self.r + self.dx <= ZERO):\n",
    "            self.dx = - self.dx\n",
    "        if (self.y + self.r + self.dy >= HEIGHT) or (self.y - self.r + self.dy <= ZERO):\n",
    "            self.dy = - self.dy\n",
    "        #colliding with other balls\n",
    "        for ball in balls:\n",
    "            if self.is_collision(ball):\n",
    "                if ball.color == BED_COLOR:\n",
    "                    canvas.create_text(WIDTH/2, HEIGHT/2, text=\"YOU LOSE!!!\", font=\"Arial 20\", fill= BED_COLOR)\n",
    "                    main_ball.dx = main_ball.dy = 0\n",
    "                else:\n",
    "                    ball.hide()\n",
    "                    balls.remove(ball)\n",
    "                    self.dx = -self.dx\n",
    "                    self.dy = -self.dy\n",
    "        self.hide()\n",
    "        self.x += self.dx\n",
    "        self.y += self.dy\n",
    "        self.draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def main_loop():\n",
    "    if \"main_ball\" in globals():\n",
    "        main_ball.move()\n",
    "        if len(balls) == count_bed_balls(balls):\n",
    "            canvas.create_text(WIDTH/2, HEIGHT/2, text=\"YOU WON!!!\", font=\"Arial 20\", fill= MAIN_BALL_COLOR)\n",
    "            main_ball.dx = main_ball.dy = 0\n",
    "    root.after(DELEY, main_loop)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def mouse_click(event):\n",
    "    global main_ball\n",
    "    if event.num == 1:\n",
    "        if \"main_ball\" not in globals():\n",
    "            main_ball = Balls(event.x, event.y, MAIN_BALL_RADIUS, MAIN_BALL_COLOR, INIT_DX, INIT_DY)\n",
    "            main_ball.draw()\n",
    "        else:\n",
    "            if main_ball.dx * main_ball.dy > 0: #turn left\n",
    "                main_ball.dy = -main_ball.dy\n",
    "            else:\n",
    "                main_ball.dx = -main_ball.dx\n",
    "    elif event.num == 3:\n",
    "        if main_ball.dx * main_ball.dy > 0: #turn right\n",
    "            main_ball.dx = -main_ball.dx\n",
    "        else:\n",
    "            main_ball.dy = -main_ball.dy\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def create_list_of_balls(num):\n",
    "    lst = []\n",
    "    while len(lst) <= num:\n",
    "        next_ball = Balls(rd.choice(range(0, WIDTH)),\n",
    "                         rd.choice(range(0, HEIGHT)),\n",
    "                         rd.choice(range(15, 35)),\n",
    "                         rd.choice(COLORS))\n",
    "        lst.append(next_ball)\n",
    "        next_ball.draw()\n",
    "        \n",
    "    return lst"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def count_bed_balls(list_balls):\n",
    "    res = 0\n",
    "    for ball in list_balls:\n",
    "        if ball.color == BED_COLOR:\n",
    "            res += 1\n",
    "    return res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "root = tk.Tk()\n",
    "root.title(\"Booooools\")\n",
    "canvas = tk.Canvas(root, width=WIDTH, height=HEIGHT, bg=BG_COLOR)\n",
    "canvas.pack()\n",
    "canvas.bind('<Button-1>', mouse_click)\n",
    "canvas.bind('<Button-2>', mouse_click, \"+\")\n",
    "canvas.bind('<Button-3>', mouse_click, \"+\")\n",
    "if \"main_ball\" in globals():\n",
    "    del main_ball\n",
    "balls = create_list_of_balls(NUN_BALLS)\n",
    "main_loop()\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.4.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
