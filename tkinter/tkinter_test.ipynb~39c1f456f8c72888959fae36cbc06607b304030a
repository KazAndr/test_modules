{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Once deleted, variables cannot be recovered. Proceed (y/[n])? y\n"
     ]
    }
   ],
   "source": [
    "reset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello World!\n",
      "Hello World!\n",
      "Hello World!\n"
     ]
    }
   ],
   "source": [
    "from tkinter import *\n",
    "\n",
    "root = Tk()\n",
    "root.title(\"Hello World!\")\n",
    "root.geometry('300x40')\n",
    "\n",
    "def button_clicked():\n",
    "    print(\"Hello World!\")\n",
    "\n",
    "def close():\n",
    "    root.destroy()\n",
    "    root.quit()\n",
    "\n",
    "button = Button(root, text=\"Press Me\", command=button_clicked)\n",
    "button.pack(fill=BOTH)\n",
    "\n",
    "root.protocol('WM_DELETE_WINDOW', close)\n",
    "\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import tkinter # просто проверка работы\n",
    "tkinter._test()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "root = Tk()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Yet another hello world\n",
      "Yet another hello world\n",
      "Yet another hello world\n",
      "Yet another hello world\n"
     ]
    }
   ],
   "source": [
    "def Hello(event):\n",
    "    print(\"Yet another hello world\")\n",
    "\n",
    "btn = Button(root,                  #родительское окно\n",
    "             text=\"Click me\",       #надпись на кнопке\n",
    "             width=30,height=5,     #ширина и высота\n",
    "             bg=\"white\",fg=\"black\") #цвет фона и надписи\n",
    "btn.bind(\"<Button-1>\", Hello)       #при нажатии ЛКМ на кнопку вызывается функция Hello\n",
    "btn.pack()                          #расположить кнопку на главном окне\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "pack(). Автоматически размещает виджеты в родительском окне. Имеет параметры side, fill, expand. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "root = Tk() # Проверка работы упаковщика pack\n",
    "Button(root, text = '1').pack(side = 'left')\n",
    "Button(root, text = '2').pack(side = 'top')\n",
    "Button(root, text = '3').pack(side = 'right')\n",
    "Button(root, text = '4').pack(side = 'bottom')\n",
    "Button(root, text = '5').pack(fill = 'both')\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "grid(). Размещает виджеты на сетке. Основные параметры: row/column – строка/столбец в сетке, rowspan/columnspan – сколько строк/столбцов занимает виджет."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "root = Tk()\n",
    "Button(root, text = '1').grid(row = 1, column = 1)\n",
    "Button(root, text = '2').grid(row = 1, column = 2)\n",
    "Button(root, text = '__3__').grid(row = 2, column = 1, columnspan = 2)\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "place(). Позволяет размещать виджеты в указанных координатах с указанными размерами.\n",
    "Основные параметры: x, y, width, height. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "root = Tk()\n",
    "Button(root, text = '1').place(x = 10, y = 10, width = 30)\n",
    "Button(root, text = '2').place(x = 45, y = 20, height = 15)\n",
    "Button(root, text = '__3__').place(x = 20, y = 40)\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Простой текстовый редактор "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "from tkinter import *\n",
    "from tkinter import filedialog\n",
    "\n",
    "def Quit(ev):\n",
    "    global root\n",
    "    root.destroy()\n",
    "    \n",
    "def LoadFile(ev): \n",
    "    fn = filedialog.Open(root, filetypes = [('*.txt files', '.txt')]).show()\n",
    "    if fn == '':\n",
    "        return\n",
    "    textbox.delete('1.0', 'end') \n",
    "    textbox.insert('1.0', open(fn, 'rt').read())\n",
    "    \n",
    "def SaveFile(ev):\n",
    "    fn = filedialog.SaveAs(root, filetypes = [('*.txt files', '.txt')]).show()\n",
    "    if fn == '':\n",
    "        return\n",
    "    if not fn.endswith(\".txt\"):\n",
    "        fn+=\".txt\"\n",
    "    open(fn, 'wt').write(textbox.get('1.0', 'end'))\n",
    "\n",
    "root = Tk()\n",
    "\n",
    "panelFrame = Frame(root, height = 60, bg = 'gray')\n",
    "textFrame = Frame(root, height = 340, width = 600)\n",
    "\n",
    "panelFrame.pack(side = 'top', fill = 'x')\n",
    "textFrame.pack(side = 'bottom', fill = 'both', expand = 1)\n",
    "\n",
    "textbox = Text(textFrame, font='Arial 14', wrap='word')\n",
    "scrollbar = Scrollbar(textFrame)\n",
    "\n",
    "scrollbar['command'] = textbox.yview\n",
    "textbox['yscrollcommand'] = scrollbar.set\n",
    "\n",
    "textbox.pack(side = 'left', fill = 'both', expand = 1)\n",
    "scrollbar.pack(side = 'right', fill = 'y')\n",
    "\n",
    "loadBtn = Button(panelFrame, text = 'Load')\n",
    "saveBtn = Button(panelFrame, text = 'Save')\n",
    "quitBtn = Button(panelFrame, text = 'Quit')\n",
    "\n",
    "loadBtn.bind(\"<Button-1>\", LoadFile)\n",
    "saveBtn.bind(\"<Button-1>\", SaveFile)\n",
    "quitBtn.bind(\"<Button-1>\", Quit)\n",
    "\n",
    "loadBtn.place(x = 10, y = 10, width = 40, height = 40)\n",
    "saveBtn.place(x = 60, y = 10, width = 40, height = 40)\n",
    "quitBtn.place(x = 110, y = 10, width = 40, height = 40)\n",
    "\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Работа в рамках классов"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Как всегда очередной 'Hello World!'\n",
      "Как всегда очередной 'Hello World!'\n"
     ]
    }
   ],
   "source": [
    "class But_print:\n",
    "    def __init__(self):\n",
    "        self.but = Button(root)\n",
    "        self.but[\"text\"] = \"Печать\"\n",
    "        self.but.bind(\"<Button-1>\",self.printer)\n",
    "        self.but.pack()\n",
    "            \n",
    "    def printer(self,event):\n",
    "        print(\"Как всегда очередной 'Hello World!'\")\n",
    "\n",
    "root = Tk()\n",
    "obj = But_print()\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Рамкив окнах"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "root = Tk()\n",
    " \n",
    "fra1 = Frame(root,width=500,height=100,bg=\"darkred\")\n",
    "fra2 = Frame(root,width=300,height=200,bg=\"green\",bd=20)\n",
    "fra3 = Frame(root,width=500,height=150,bg=\"darkblue\")\n",
    "\n",
    "\n",
    "win = Toplevel(root,relief=SUNKEN,bd=10,bg=\"lightblue\")\n",
    "win.title(\"Дочернее окно\")\n",
    "win.minsize(width=400,height=200)\n",
    "\n",
    "\n",
    "fra1.pack()\n",
    "fra2.pack()\n",
    "fra3.pack()\n",
    " \n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "from tkinter import ttk\n",
    "import tkinter as tk\n",
    "from tkinter.scrolledtext import ScrolledText\n",
    "\n",
    "\n",
    "def demo():\n",
    "    root = tk.Tk()\n",
    "    root.title(\"ttk.Notebook\")\n",
    "\n",
    "    nb = ttk.Notebook(root)\n",
    "\n",
    "    # adding Frames as pages for the ttk.Notebook \n",
    "    # first page, which would get widgets gridded into it\n",
    "    page1 = ttk.Frame(nb)\n",
    "\n",
    "    # second page\n",
    "    page2 = ttk.Frame(nb)\n",
    "    text = ScrolledText(page2)\n",
    "    text.pack(expand=1, fill=\"both\")\n",
    "\n",
    "    nb.add(page1, text='Главное меню')\n",
    "    nb.add(page2, text='Настройки')\n",
    "\n",
    "    nb.pack(expand=1, fill=\"both\")\n",
    "\n",
    "    root.mainloop()\n",
    "\n",
    "demo()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from tkinter import *\n",
    "\n",
    "class Tabs(Frame):\n",
    "\n",
    "    \"\"\"Tabs for testgen output\"\"\"\n",
    "\n",
    "    def __init__(self, parent):\n",
    "        super(Tabs, self).__init__()\n",
    "        self.parent = parent\n",
    "        self.columnconfigure(10, weight=1)\n",
    "        self.rowconfigure(3, weight=1)\n",
    "        self.curtab = None\n",
    "        self.tabs = {}\n",
    "        self.addTab()                \n",
    "        self.pack(fill=BOTH, expand=1, padx=5, pady=5)\n",
    "\n",
    "    def addTab(self):\n",
    "        tabslen = len(self.tabs)\n",
    "        if tabslen < 10:\n",
    "            tab = {}\n",
    "            btn = Button(self, text=\"Tab \"+str(tabslen), command=lambda: self.raiseTab(tabslen))\n",
    "            btn.grid(row=0, column=tabslen, sticky=W+E)\n",
    "\n",
    "            textbox = Text(self.parent)\n",
    "            textbox.grid(row=1, column=0, columnspan=10, rowspan=2, sticky=W+E+N+S, in_=self)\n",
    "\n",
    "            # Y axis scroll bar\n",
    "            scrollby = Scrollbar(self, command=textbox.yview)\n",
    "            scrollby.grid(row=7, column=5, rowspan=2, columnspan=1, sticky=N+S+E)\n",
    "            textbox['yscrollcommand'] = scrollby.set\n",
    "\n",
    "            tab['id']=tabslen\n",
    "            tab['btn']=btn\n",
    "            tab['txtbx']=textbox\n",
    "            self.tabs[tabslen] = tab\n",
    "            self.raiseTab(tabslen)\n",
    "\n",
    "    def raiseTab(self, tabid):\n",
    "        print(tabid)\n",
    "        print(\"curtab\"+str(self.curtab))\n",
    "        if self.curtab!= None and self.curtab != tabid and len(self.tabs)>1:\n",
    "                self.tabs[tabid]['txtbx'].lift(self)\n",
    "                self.tabs[self.curtab]['txtbx'].lower(self)\n",
    "        self.curtab = tabid\n",
    "\n",
    "\n",
    "def main():\n",
    "    root = Tk()\n",
    "    root.geometry(\"600x450+300+300\")\n",
    "    t = Tabs(root)\n",
    "    t.addTab()\n",
    "    root.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "curtabNone\n",
      "1\n",
      "curtab0\n",
      "1\n",
      "curtab1\n",
      "0\n",
      "curtab1\n"
     ]
    }
   ],
   "source": [
    "main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import matplotlib\n",
    "matplotlib.use('TkAgg')\n",
    "\n",
    "from numpy import arange, sin, pi\n",
    "from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg\n",
    "from matplotlib.figure import Figure\n",
    "\n",
    "import sys\n",
    "if sys.version_info[0] < 3:\n",
    "    import Tkinter as Tk\n",
    "else:\n",
    "    import tkinter as Tk\n",
    "\n",
    "\n",
    "def destroy():\n",
    "    root.destroy()\n",
    "\n",
    "root = Tk.Tk()\n",
    "root.wm_title(\"Embedding in TK\")\n",
    "panelFrame = Tk.Frame(root, height = 200, bg = 'gray')\n",
    "\n",
    "f = Figure(figsize=(5, 4), dpi=80)\n",
    "a = f.add_subplot(111)\n",
    "t = arange(0.0, 3.0, 0.01)\n",
    "s = sin(2*pi*t)\n",
    "\n",
    "a.plot(t, s)\n",
    "a.set_title('Tk embedding')\n",
    "a.set_xlabel('X axis label')\n",
    "a.set_ylabel('Y label')\n",
    "\n",
    "\n",
    "# a tk.DrawingArea\n",
    "canvas = FigureCanvasTkAgg(f, master=panelFrame)\n",
    "canvas.show()\n",
    "canvas.get_tk_widget().pack(side=Tk.TOP) #, fill=Tk.BOTH, expand=1)\n",
    "\n",
    "canvas._tkcanvas.pack(side=Tk.TOP) #, fill=Tk.BOTH, expand=1)\n",
    "\n",
    "button = Tk.Button(master=panelFrame, text='Quit', command=destroy)\n",
    "button.pack(side=Tk.BOTTOM)\n",
    "panelFrame.pack()\n",
    "Tk.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "root.destroy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from tkinter import *\n",
    "root=Tk()\n",
    "listbox1=Listbox(root,height=5,width=20,selectmode=EXTENDED)\n",
    "listbox2=Listbox(root,height=5,width=20,selectmode=SINGLE)\n",
    "list1=[u\"Москва\",u\"Санкт-Петербург\",u\"Саратов\",u\"Омск\"]\n",
    "list2=[u\"Канберра\",u\"Сидней\",u\"Мельбурн\",u\"Аделаида\"]\n",
    "for i in list1:\n",
    "    listbox1.insert(END,i)\n",
    "for i in list2:\n",
    "    listbox2.insert(END,i)\n",
    "listbox1.pack()\n",
    "listbox2.pack()\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import tkinter as tk\n",
    "root=tk.Tk()\n",
    "var1=tk.IntVar()\n",
    "var2=tk.IntVar()\n",
    "check1=tk.Checkbutton(root,text=u'Русский times 10', font=\"times 10\", anchor=tk.W, variable=var1,onvalue=1,offvalue=0)\n",
    "check2=tk.Checkbutton(root,text=u'Русский times 13', font=\"times 13\", anchor=tk.W, variable=var2,onvalue=1,offvalue=0)\n",
    "check3=tk.Checkbutton(root,text=u'Русский clearlyu 13', font=\"clearlyu 13\", anchor=tk.W, variable=var2,onvalue=1,offvalue=0)\n",
    "check4=tk.Checkbutton(root,text=u'Русский clearlyu 15', font=\"clearlyu 15\", anchor=tk.W, variable=var2,onvalue=1,offvalue=0)\n",
    "check5=tk.Checkbutton(root,text=u'Русский terminal 13', font=\"terminal 13\", anchor=tk.W, variable=var2,onvalue=1,offvalue=0)\n",
    "check6=tk.Checkbutton(root,text=u'Русский terminal 15', font=\"terminal 15\", anchor=tk.W, variable=var2,onvalue=1,offvalue=0)\n",
    "\n",
    "check1.pack(fill=tk.X, expand=True)\n",
    "check2.pack(fill=tk.X, expand=True)\n",
    "check3.pack(fill=tk.X, expand=True)\n",
    "check4.pack(fill=tk.X, expand=True)\n",
    "check5.pack(fill=tk.X, expand=True)\n",
    "check6.pack(fill=tk.X, expand=True)\n",
    "root.mainloop()\n",
    "#clearlyu 13"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "TclError",
     "evalue": "can't invoke \"destroy\" command:  application has been destroyed",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTclError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-20-833b2f7c3927>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mroot\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdestroy\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m/home/andrey/programming/miniconda3/lib/python3.4/tkinter/__init__.py\u001b[0m in \u001b[0;36mdestroy\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m   1896\u001b[0m         end the application of this Tcl interpreter.\"\"\"\n\u001b[0;32m   1897\u001b[0m         \u001b[1;32mfor\u001b[0m \u001b[0mc\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mlist\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mchildren\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mc\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdestroy\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1898\u001b[1;33m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtk\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcall\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'destroy'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_w\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1899\u001b[0m         \u001b[0mMisc\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdestroy\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1900\u001b[0m         \u001b[1;32mglobal\u001b[0m \u001b[0m_default_root\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mTclError\u001b[0m: can't invoke \"destroy\" command:  application has been destroyed"
     ]
    }
   ],
   "source": [
    "root.destroy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from tkinter import *\n",
    "\n",
    "import locale\n",
    "\n",
    "locale.setlocale(locale.LC_ALL, 'ru_RU.UTF8')\n",
    "tk1 = Tk()\n",
    "txt = Entry(tk1, font=\"Helvetica 12\")\n",
    "txt.pack()\n",
    "tk1.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('newcenturyschlbk',\n",
       " 'nimbus roman no9 l',\n",
       " 'clearlyu devangari extra',\n",
       " 'texgyreheros',\n",
       " 'clearlyu arabic',\n",
       " 'texgyreadventor',\n",
       " 'dingbats',\n",
       " 'standard symbols l',\n",
       " 'texgyrepagella',\n",
       " 'urw chancery l',\n",
       " 'clearlyu arabic extra',\n",
       " 'urw palladio l',\n",
       " 'fixed',\n",
       " 'texgyretermes',\n",
       " 'lucidatypewriter',\n",
       " 'courier 10 pitch',\n",
       " 'open look glyph',\n",
       " 'bitstream charter',\n",
       " 'texgyrechorus',\n",
       " 'avantgarde',\n",
       " 'clearlyu pua',\n",
       " 'urw gothic l',\n",
       " 'urw bookman l',\n",
       " 'century schoolbook l',\n",
       " 'avant garde gothic',\n",
       " 'clean',\n",
       " 'terminal',\n",
       " 'zapf chancery',\n",
       " 'gothic',\n",
       " 'bookman',\n",
       " 'new century schoolbook',\n",
       " 'clearlyu alternate glyphs',\n",
       " 'lucidabright',\n",
       " 'song ti',\n",
       " 'latin modern typewriter',\n",
       " 'zapf dingbats',\n",
       " 'open look cursor',\n",
       " 'helvetica',\n",
       " 'mincho',\n",
       " 'texgyrecursor',\n",
       " 'nimbus sans l',\n",
       " 'palatino',\n",
       " 'clearlyu',\n",
       " 'courier',\n",
       " 'texgyrebonum',\n",
       " 'lucida',\n",
       " 'latin modern sans',\n",
       " 'latin modern typewriter variable width',\n",
       " 'itc avant garde gothic',\n",
       " 'clearlyu devanagari',\n",
       " 'nil',\n",
       " 'itc zapf chancery',\n",
       " 'latin modern sansquotation',\n",
       " 'itc bookman',\n",
       " 'fangsong ti',\n",
       " 'charter',\n",
       " 'times',\n",
       " 'latin modern roman',\n",
       " 'itc zapf dingbats',\n",
       " 'newspaper',\n",
       " 'clearlyu ligature',\n",
       " 'texgyreschola',\n",
       " 'nimbus mono l',\n",
       " 'zapfdingbats',\n",
       " 'symbol')"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from tkinter import Tk, font\n",
    "root = Tk()\n",
    "font.families()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "try:\n",
    "    from tkinter import Tk\n",
    "    from tkinter.ttk import Style, Button, Label\n",
    "except ImportError:\n",
    "    from Tkinter import Tk\n",
    "    from ttk import Style, Button, Label\n",
    "from sys import platform\n",
    "from tkFontChooser import askfont\n",
    "\n",
    "# create main window\n",
    "root = Tk()\n",
    "style = Style(root)\n",
    "if \"win\" == platform[:3]:\n",
    "    style.theme_use('vista')\n",
    "elif \"darwin\" in platform:\n",
    "    style.theme_use('clam')\n",
    "else:\n",
    "    style.theme_use('clam')\n",
    "bg = style.lookup(\"TLabel\", \"background\")\n",
    "root.configure(bg=bg)\n",
    "label = Label(root, text='Выбранный шрифт: ')\n",
    "label.pack(padx=10, pady=(10,4))\n",
    "\n",
    "def callback():\n",
    "    # open the font chooser and get the font selected by the user\n",
    "    font = askfont(root)\n",
    "    # font is \"\" if the user has cancelled\n",
    "    if font:\n",
    "        # spaces in the family name need to be escaped\n",
    "        font['family'] = font['family'].replace(' ', '\\ ')\n",
    "        font_str = \"%(family)s %(size)i %(weight)s %(slant)s\" % font\n",
    "        if font['underline']:\n",
    "            font_str += ' underline'\n",
    "        if font['overstrike']:\n",
    "            font_str += ' overstrike'\n",
    "        label.configure(font=font_str, text='Выбранный шрифт: ' + font_str.replace('\\ ', ' '))\n",
    "\n",
    "Button(root, text='Выбор шрифта', command=callback).pack(padx=10, pady=(4,10))\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def read_pv(filename): # Ф-ия считывания заголовка в словарь и последовательности импульсов в таблицу\n",
    "\n",
    "    \n",
    "    #global header # Определение гломальной переменной словаря для заголовка\n",
    "    \n",
    "    header = dict()\n",
    "    \n",
    "    header_list = [] # Определение вспомогательного списка для работы регулярной конструкции\n",
    "\n",
    "    \n",
    "    f = open(filename, 'r')\n",
    "\n",
    "    first_line = f.readline() # Считывание количества параметров из файла\n",
    "    \n",
    "    # Блок записи заголовка через регулярную конструкцию в словарь\n",
    "\n",
    "    header_re = re.compile(r'(?P<key>\\w*)\\s*(?P<value>.*)')\n",
    "    average_profile_re = re.compile(r'(?P<key>\\w*)\\s*(?P<value>.*)') \n",
    "\n",
    "    res_dict = header_re.search(first_line).groupdict()\n",
    "\n",
    "    header_list.append(res_dict[\"key\"])\n",
    "\n",
    "    for k in range(int(res_dict['value'])-1):\n",
    "        line = f.readline()\n",
    "        res_dict = header_re.search(line).groupdict()\n",
    "        header_list.append(res_dict[\"key\"])\n",
    "        header[res_dict[\"key\"]] = res_dict[\"value\"]     \n",
    "    \n",
    "    # Определение переменных количества импульсов и окна для строк и столбцов в pandas\n",
    "    index = range(int(header['numpointwin'])+1)\n",
    "    columns = range(int(header['numpuls']))\n",
    "\n",
    "    #global tablePulses # Определение гломальной переменной таблицы для импульсов\n",
    "    #global averageProfile # Определение гломальной переменной таблицы для среднего профиля\n",
    "    \n",
    "    tablePulses = pd.DataFrame(index=index, columns=columns)\n",
    "    averageProfile = pd.DataFrame(index=index[1:], columns=columns[:1]) # Создание таблицы для среднего профиля\n",
    "    \n",
    "    averageProfile = averageProfile.fillna(0) # Заполнение таблицы нулями для последующего суммирования\n",
    "    \n",
    "    # Блок записи импульсов через регулярную конструкцию в список, а затем в таблицу pandas\n",
    "    pulses =  dict()\n",
    "    pulses_re = re.compile(r'(?P<key>\\w*)\\s*(?P<value>.*)') \n",
    "\n",
    "    for i in range(int(header['numpuls'])):\n",
    "        for j in range(int(header['numpointwin'])+1):\n",
    "            line = f.readline()\n",
    "            res_dict = pulses_re.search(line).groupdict()\n",
    "            try:\n",
    "                tablePulses[i][j] = float(res_dict[\"value\"])\n",
    "            except:\n",
    "                tablePulses[i][j] = res_dict[\"value\"]\n",
    "\n",
    "    f.close()\n",
    "    \n",
    "    tablePulses = tablePulses[1:] # Удаление из таблицы первой, безинформативной строки с pulse№\n",
    "    \n",
    "    return header, tablePulses, averageProfile"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.4.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
